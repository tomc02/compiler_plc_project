# Generated from PJP_Language.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,41,284,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
        1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
        10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,
        16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,
        22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,
        26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,
        29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,
        32,1,32,1,32,1,32,1,33,1,33,5,33,197,8,33,10,33,12,33,200,9,33,3,
        33,202,8,33,1,34,4,34,205,8,34,11,34,12,34,206,1,34,1,34,4,34,211,
        8,34,11,34,12,34,212,1,35,4,35,216,8,35,11,35,12,35,217,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,229,8,36,1,37,1,37,1,37,
        5,37,234,8,37,10,37,12,37,237,9,37,1,37,1,37,1,38,1,38,1,38,1,38,
        3,38,245,8,38,1,38,3,38,248,8,38,1,38,3,38,251,8,38,1,39,4,39,254,
        8,39,11,39,12,39,255,1,39,1,39,1,40,1,40,1,40,1,40,5,40,264,8,40,
        10,40,12,40,267,9,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,
        5,41,278,8,41,10,41,12,41,281,9,41,1,41,1,41,1,265,0,42,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
        26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
        37,75,38,77,0,79,39,81,40,83,41,1,0,9,2,0,65,90,97,122,3,0,48,57,
        65,90,97,122,1,0,48,57,4,0,10,10,13,13,34,34,92,92,8,0,34,34,39,
        39,92,92,98,98,102,102,110,110,114,114,116,116,1,0,48,51,1,0,48,
        55,3,0,9,10,13,13,32,32,2,0,10,10,13,13,296,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
        0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
        0,0,75,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,
        0,3,87,1,0,0,0,5,89,1,0,0,0,7,91,1,0,0,0,9,93,1,0,0,0,11,95,1,0,
        0,0,13,100,1,0,0,0,15,106,1,0,0,0,17,110,1,0,0,0,19,116,1,0,0,0,
        21,123,1,0,0,0,23,128,1,0,0,0,25,130,1,0,0,0,27,132,1,0,0,0,29,134,
        1,0,0,0,31,136,1,0,0,0,33,138,1,0,0,0,35,140,1,0,0,0,37,142,1,0,
        0,0,39,144,1,0,0,0,41,146,1,0,0,0,43,148,1,0,0,0,45,150,1,0,0,0,
        47,153,1,0,0,0,49,156,1,0,0,0,51,159,1,0,0,0,53,162,1,0,0,0,55,167,
        1,0,0,0,57,173,1,0,0,0,59,176,1,0,0,0,61,181,1,0,0,0,63,187,1,0,
        0,0,65,190,1,0,0,0,67,194,1,0,0,0,69,204,1,0,0,0,71,215,1,0,0,0,
        73,228,1,0,0,0,75,230,1,0,0,0,77,250,1,0,0,0,79,253,1,0,0,0,81,259,
        1,0,0,0,83,273,1,0,0,0,85,86,5,123,0,0,86,2,1,0,0,0,87,88,5,125,
        0,0,88,4,1,0,0,0,89,90,5,61,0,0,90,6,1,0,0,0,91,92,5,40,0,0,92,8,
        1,0,0,0,93,94,5,41,0,0,94,10,1,0,0,0,95,96,5,116,0,0,96,97,5,114,
        0,0,97,98,5,117,0,0,98,99,5,101,0,0,99,12,1,0,0,0,100,101,5,102,
        0,0,101,102,5,97,0,0,102,103,5,108,0,0,103,104,5,115,0,0,104,105,
        5,101,0,0,105,14,1,0,0,0,106,107,5,105,0,0,107,108,5,110,0,0,108,
        109,5,116,0,0,109,16,1,0,0,0,110,111,5,102,0,0,111,112,5,108,0,0,
        112,113,5,111,0,0,113,114,5,97,0,0,114,115,5,116,0,0,115,18,1,0,
        0,0,116,117,5,115,0,0,117,118,5,116,0,0,118,119,5,114,0,0,119,120,
        5,105,0,0,120,121,5,110,0,0,121,122,5,103,0,0,122,20,1,0,0,0,123,
        124,5,98,0,0,124,125,5,111,0,0,125,126,5,111,0,0,126,127,5,108,0,
        0,127,22,1,0,0,0,128,129,5,59,0,0,129,24,1,0,0,0,130,131,5,44,0,
        0,131,26,1,0,0,0,132,133,5,46,0,0,133,28,1,0,0,0,134,135,5,42,0,
        0,135,30,1,0,0,0,136,137,5,47,0,0,137,32,1,0,0,0,138,139,5,37,0,
        0,139,34,1,0,0,0,140,141,5,43,0,0,141,36,1,0,0,0,142,143,5,45,0,
        0,143,38,1,0,0,0,144,145,5,60,0,0,145,40,1,0,0,0,146,147,5,62,0,
        0,147,42,1,0,0,0,148,149,5,33,0,0,149,44,1,0,0,0,150,151,5,61,0,
        0,151,152,5,61,0,0,152,46,1,0,0,0,153,154,5,33,0,0,154,155,5,61,
        0,0,155,48,1,0,0,0,156,157,5,38,0,0,157,158,5,38,0,0,158,50,1,0,
        0,0,159,160,5,124,0,0,160,161,5,124,0,0,161,52,1,0,0,0,162,163,5,
        114,0,0,163,164,5,101,0,0,164,165,5,97,0,0,165,166,5,100,0,0,166,
        54,1,0,0,0,167,168,5,119,0,0,168,169,5,114,0,0,169,170,5,105,0,0,
        170,171,5,116,0,0,171,172,5,101,0,0,172,56,1,0,0,0,173,174,5,105,
        0,0,174,175,5,102,0,0,175,58,1,0,0,0,176,177,5,101,0,0,177,178,5,
        108,0,0,178,179,5,115,0,0,179,180,5,101,0,0,180,60,1,0,0,0,181,182,
        5,119,0,0,182,183,5,104,0,0,183,184,5,105,0,0,184,185,5,108,0,0,
        185,186,5,101,0,0,186,62,1,0,0,0,187,188,5,100,0,0,188,189,5,111,
        0,0,189,64,1,0,0,0,190,191,5,102,0,0,191,192,5,111,0,0,192,193,5,
        114,0,0,193,66,1,0,0,0,194,201,7,0,0,0,195,197,7,1,0,0,196,195,1,
        0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,202,1,
        0,0,0,200,198,1,0,0,0,201,198,1,0,0,0,201,202,1,0,0,0,202,68,1,0,
        0,0,203,205,7,2,0,0,204,203,1,0,0,0,205,206,1,0,0,0,206,204,1,0,
        0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,210,5,46,0,0,209,211,7,2,
        0,0,210,209,1,0,0,0,211,212,1,0,0,0,212,210,1,0,0,0,212,213,1,0,
        0,0,213,70,1,0,0,0,214,216,7,2,0,0,215,214,1,0,0,0,216,217,1,0,0,
        0,217,215,1,0,0,0,217,218,1,0,0,0,218,72,1,0,0,0,219,220,5,116,0,
        0,220,221,5,114,0,0,221,222,5,117,0,0,222,229,5,101,0,0,223,224,
        5,102,0,0,224,225,5,97,0,0,225,226,5,108,0,0,226,227,5,115,0,0,227,
        229,5,101,0,0,228,219,1,0,0,0,228,223,1,0,0,0,229,74,1,0,0,0,230,
        235,5,34,0,0,231,234,8,3,0,0,232,234,3,77,38,0,233,231,1,0,0,0,233,
        232,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,
        238,1,0,0,0,237,235,1,0,0,0,238,239,5,34,0,0,239,76,1,0,0,0,240,
        241,5,92,0,0,241,251,7,4,0,0,242,247,5,92,0,0,243,245,7,5,0,0,244,
        243,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,248,7,6,0,0,247,
        244,1,0,0,0,247,248,1,0,0,0,248,249,1,0,0,0,249,251,7,6,0,0,250,
        240,1,0,0,0,250,242,1,0,0,0,251,78,1,0,0,0,252,254,7,7,0,0,253,252,
        1,0,0,0,254,255,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,257,
        1,0,0,0,257,258,6,39,0,0,258,80,1,0,0,0,259,260,5,47,0,0,260,261,
        5,42,0,0,261,265,1,0,0,0,262,264,9,0,0,0,263,262,1,0,0,0,264,267,
        1,0,0,0,265,266,1,0,0,0,265,263,1,0,0,0,266,268,1,0,0,0,267,265,
        1,0,0,0,268,269,5,42,0,0,269,270,5,47,0,0,270,271,1,0,0,0,271,272,
        6,40,0,0,272,82,1,0,0,0,273,274,5,47,0,0,274,275,5,47,0,0,275,279,
        1,0,0,0,276,278,8,8,0,0,277,276,1,0,0,0,278,281,1,0,0,0,279,277,
        1,0,0,0,279,280,1,0,0,0,280,282,1,0,0,0,281,279,1,0,0,0,282,283,
        6,41,0,0,283,84,1,0,0,0,15,0,198,201,206,212,217,228,233,235,244,
        247,250,255,265,279,1,6,0,0
    ]

class PJP_LanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    INT_KEYWORD = 8
    FLOAT_KEYWORD = 9
    STRING_KEYWORD = 10
    BOOL_KEYWORD = 11
    SEMI = 12
    COMMA = 13
    CON = 14
    MUL = 15
    DIV = 16
    MOD = 17
    ADD = 18
    SUB = 19
    LES = 20
    GRE = 21
    NEG = 22
    EQ = 23
    NEQ = 24
    AND = 25
    OR = 26
    READ = 27
    WRITE = 28
    IF = 29
    ELSE = 30
    WHILE = 31
    DO = 32
    FOR = 33
    IDENTIFIER = 34
    FLOAT = 35
    INT = 36
    BOOL = 37
    STRING = 38
    WS = 39
    COMMENT = 40
    LINE_COMMENT = 41

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'='", "'('", "')'", "'true'", "'false'", "'int'", 
            "'float'", "'string'", "'bool'", "';'", "','", "'.'", "'*'", 
            "'/'", "'%'", "'+'", "'-'", "'<'", "'>'", "'!'", "'=='", "'!='", 
            "'&&'", "'||'", "'read'", "'write'", "'if'", "'else'", "'while'", 
            "'do'", "'for'" ]

    symbolicNames = [ "<INVALID>",
            "INT_KEYWORD", "FLOAT_KEYWORD", "STRING_KEYWORD", "BOOL_KEYWORD", 
            "SEMI", "COMMA", "CON", "MUL", "DIV", "MOD", "ADD", "SUB", "LES", 
            "GRE", "NEG", "EQ", "NEQ", "AND", "OR", "READ", "WRITE", "IF", 
            "ELSE", "WHILE", "DO", "FOR", "IDENTIFIER", "FLOAT", "INT", 
            "BOOL", "STRING", "WS", "COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "INT_KEYWORD", "FLOAT_KEYWORD", "STRING_KEYWORD", "BOOL_KEYWORD", 
                  "SEMI", "COMMA", "CON", "MUL", "DIV", "MOD", "ADD", "SUB", 
                  "LES", "GRE", "NEG", "EQ", "NEQ", "AND", "OR", "READ", 
                  "WRITE", "IF", "ELSE", "WHILE", "DO", "FOR", "IDENTIFIER", 
                  "FLOAT", "INT", "BOOL", "STRING", "EscapeSequence", "WS", 
                  "COMMENT", "LINE_COMMENT" ]

    grammarFileName = "PJP_Language.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


